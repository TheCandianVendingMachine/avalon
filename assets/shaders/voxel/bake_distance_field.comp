#version 430
layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(location=0) restrict writeonly uniform image3D newParentBuffer;
layout(location=1,rgba8) restrict readonly uniform image3D oldParentBuffer;
layout(location=2,r16ui) restrict uniform uimage3D distanceBuffer;
layout(location=3) uniform int jump;

const ivec3 OFFSETS[26] = ivec3[26](\
    ivec3(-jump, -jump,  -jump),
    ivec3(0,     -jump,  -jump),
    ivec3(jump,  -jump,  -jump),
    ivec3(-jump, 0,      -jump),
    ivec3(0,     0,      -jump),
    ivec3(jump,  0,      -jump),
    ivec3(-jump, jump,   -jump),
    ivec3(0,     jump,   -jump),
    ivec3(jump,  jump,   -jump),
    //
    ivec3(-jump, -jump,  0),
    ivec3(0,     -jump,  0),
    ivec3(jump,  -jump,  0),
    ivec3(-jump, 0,      0),
  //ivec3(0,     0,      0),
    ivec3(jump,  0,      0),
    ivec3(-jump, jump,   0),
    ivec3(0,     jump,   0),
    ivec3(jump,  jump,   0),
    //
    ivec3(-jump, -jump,  jump),
    ivec3(0,     -jump,  jump),
    ivec3(jump,  -jump,  jump),
    ivec3(-jump, 0,      jump),
    ivec3(0,     0,      jump),
    ivec3(jump,  0,      jump),
    ivec3(-jump, jump,   jump),
    ivec3(0,     jump,   jump),
    ivec3(jump,  jump,   jump)
);

void main() {

    ivec3 maximumSize = imageSize(oldParentBuffer);

    ivec3 pCoord = ivec3(gl_GlobalInvocationID);

    int bestDistance = int(imageLoad(distanceBuffer, pCoord).r);
    ivec4 bestParent = ivec4(imageLoad(oldParentBuffer, pCoord) * 256.0);
    bool pInitialised = 0 != bestParent.a;

    for (int idx = 0; idx < OFFSETS.length(); idx++) {
        ivec3 qCoord = pCoord + OFFSETS[idx];
        if (any(lessThan(qCoord, ivec3(0)))) { continue; }
        if (any(greaterThanEqual(qCoord, maximumSize))) { continue; }

        ivec4 qParent = ivec4(imageLoad(oldParentBuffer, qCoord) * 256.0);
        if (qParent.a != 0) {
            vec3 p0 = vec3(pCoord);
            vec3 p1 = vec3(qParent.xyz);

            int candidateDistance = int(dot(abs(p0 - p1), vec3(1)));
            if (!pInitialised || bestDistance > candidateDistance) {
                bestDistance = candidateDistance;
                bestParent = qParent;
                pInitialised = true;
            }
        }
    }

    imageStore(newParentBuffer, pCoord, vec4(bestParent / 256.0));
    imageStore(distanceBuffer, pCoord, uvec4(bestDistance));
}
