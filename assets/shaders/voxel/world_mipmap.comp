#version 430
layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(location=0) restrict writeonly uniform image3D mipmap;
layout(location=1) uniform usampler3D grid;
layout(location=2) uniform int level;

unsigned int encodeGridData(in int safeStep, in int cell) {
    int collisionFlag = 0;
    int empty = 0;
    int opaque = 0;

    return (collisionFlag << 0) | (empty << 5) | (opaque << 6) | (safeStep << 7) | (cell << 7);
}

void getGridData(in ivec3 position, out int safeStep, out int cell) {
    unsigned int texel = texelFetch(grid, position, 0).r;
    int collisionFlag = (texel & 0x0000001F) >> 0;
    bool empty = 1 == ((texel & 0x00000020) >> 5);
    bool opaque = 1 == ((texel & 0x00000040) >> 6);
    safeStep = (texel & 0x0000FF80) >> 7;
    cell = (texel & 0x0001FF80) >> 7;
}

void main() {
    ivec3 pCoord = ivec3(gl_GlobalInvocationID);
    vec3 baseSize = vec3(textureSize(grid, level - 1));
    vec3 mipSize = vec3(imageSize(mipmap));
    vec3 kernelSize = vec3(baseSize / mipSize);
    ivec3 halfKernelSize = ivec3(kernelSize / 2);

    ivec3 originalCoord = pCoord * ivec3(baseSize / mipSize);

    int minimumSafeStep = 10000000;
    for (int xOffset = -halfKernelSize.x; xOffset <= halfKernelSize.x; xOffset++) {
        for (int yOffset = -halfKernelSize.y; yOffset <= halfKernelSize.y; yOffset++) {
            for (int zOffset = -halfKernelSize.z; zOffset <= halfKernelSize.z; zOffset++) {
                int cell;
                int safeStep;
                ivec3 samplePos = originalCoord + ivec3(xOffset, yOffset, zOffset);
                if (any(lessThan(samplePos, ivec3(0))) || any(greaterThanEqual(samplePos, ivec3(baseSize)))) {
                    continue;
                }
                getGridData(samplePos, safeStep, cell);
                if (cell == 0) {
                    minimumSafeStep = min(minimumSafeStep, safeStep);
                } else {
                    minimumSafeStep = 1;
                }
            }
        }
    }

    uvec4 texel = uvec4(encodeGridData(minimumSafeStep, 0));
    imageStore(mipmap, pCoord, texel);
}
