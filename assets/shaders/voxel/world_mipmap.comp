#version 430
layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(location=0) restrict writeonly uniform image3D mipmap;
layout(location=1) uniform sampler3D grid;
layout(location=2) uniform int level;

vec4 encodeGridData(in int safeStep, in int cell) {
    int unused = 0;
    int embedded = (safeStep << 0) | (cell << 9) | (unused << 20);
    vec4 texel;
    texel.r = (embedded & 0x000000FF);
    texel.g = (embedded & 0x0000FF00) >> 8;
    texel.b = (embedded & 0x00FF0000) >> 16;
    texel.a = (embedded & 0xFF000000) >> 24;
    return texel / 256.0;
}

void getGridData(in ivec3 position, out int safeStep, out int cell) {
    ivec4 texel = ivec4(floor(texelFetch(grid, position, level - 1) * 256.0));
    int embedded = (texel.a << 24) | (texel.b << 16) | (texel.g << 8) | (texel.r << 0);
    safeStep = (embedded & 0x000001FF) >> 0;
    cell = (embedded & 0x000FFE00) >> 9;
    int unused = (embedded & 0xFFF00000) >> 20;
}

void main() {
    ivec3 pCoord = ivec3(gl_GlobalInvocationID);
    vec3 baseSize = vec3(textureSize(grid, level - 1));
    vec3 mipSize = vec3(imageSize(mipmap));
    vec3 kernelSize = vec3(baseSize / mipSize);
    ivec3 halfKernelSize = ivec3(kernelSize / 2);

    ivec3 originalCoord = pCoord * ivec3(baseSize / mipSize);

    int minimumSafeStep = 10000000;
    for (int xOffset = -halfKernelSize.x; xOffset <= halfKernelSize.x; xOffset++) {
        for (int yOffset = -halfKernelSize.y; yOffset <= halfKernelSize.y; yOffset++) {
            for (int zOffset = -halfKernelSize.z; zOffset <= halfKernelSize.z; zOffset++) {
                int cell;
                int safeStep;
                ivec3 samplePos = originalCoord + ivec3(xOffset, yOffset, zOffset);
                if (any(lessThan(samplePos, ivec3(0))) || any(greaterThanEqual(samplePos, ivec3(baseSize)))) {
                    continue;
                }
                getGridData(samplePos, safeStep, cell);
                if (cell == 0) {
                    minimumSafeStep = min(minimumSafeStep, safeStep);
                } else {
                    minimumSafeStep = 1;
                }
            }
        }
    }

    vec4 texel = encodeGridData(minimumSafeStep, 0);
    imageStore(mipmap, pCoord, texel);
}
